// Code generated by MockGen. DO NOT EDIT.
// Source: andromeda.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	andromeda "github.com/ramadani/andromeda"
)

// MockUpdateQuotaUsage is a mock of UpdateQuotaUsage interface.
type MockUpdateQuotaUsage struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateQuotaUsageMockRecorder
}

// MockUpdateQuotaUsageMockRecorder is the mock recorder for MockUpdateQuotaUsage.
type MockUpdateQuotaUsageMockRecorder struct {
	mock *MockUpdateQuotaUsage
}

// NewMockUpdateQuotaUsage creates a new mock instance.
func NewMockUpdateQuotaUsage(ctrl *gomock.Controller) *MockUpdateQuotaUsage {
	mock := &MockUpdateQuotaUsage{ctrl: ctrl}
	mock.recorder = &MockUpdateQuotaUsageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateQuotaUsage) EXPECT() *MockUpdateQuotaUsageMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUpdateQuotaUsage) Do(ctx context.Context, req *andromeda.QuotaUsageRequest) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockUpdateQuotaUsageMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUpdateQuotaUsage)(nil).Do), ctx, req)
}

// MockUpdateQuotaUsageListener is a mock of UpdateQuotaUsageListener interface.
type MockUpdateQuotaUsageListener struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateQuotaUsageListenerMockRecorder
}

// MockUpdateQuotaUsageListenerMockRecorder is the mock recorder for MockUpdateQuotaUsageListener.
type MockUpdateQuotaUsageListenerMockRecorder struct {
	mock *MockUpdateQuotaUsageListener
}

// NewMockUpdateQuotaUsageListener creates a new mock instance.
func NewMockUpdateQuotaUsageListener(ctrl *gomock.Controller) *MockUpdateQuotaUsageListener {
	mock := &MockUpdateQuotaUsageListener{ctrl: ctrl}
	mock.recorder = &MockUpdateQuotaUsageListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateQuotaUsageListener) EXPECT() *MockUpdateQuotaUsageListenerMockRecorder {
	return m.recorder
}

// OnError mocks base method.
func (m *MockUpdateQuotaUsageListener) OnError(ctx context.Context, req *andromeda.QuotaUsageRequest, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", ctx, req, err)
}

// OnError indicates an expected call of OnError.
func (mr *MockUpdateQuotaUsageListenerMockRecorder) OnError(ctx, req, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockUpdateQuotaUsageListener)(nil).OnError), ctx, req, err)
}

// OnSuccess mocks base method.
func (m *MockUpdateQuotaUsageListener) OnSuccess(ctx context.Context, req *andromeda.QuotaUsageRequest, updatedUsage int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSuccess", ctx, req, updatedUsage)
}

// OnSuccess indicates an expected call of OnSuccess.
func (mr *MockUpdateQuotaUsageListenerMockRecorder) OnSuccess(ctx, req, updatedUsage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSuccess", reflect.TypeOf((*MockUpdateQuotaUsageListener)(nil).OnSuccess), ctx, req, updatedUsage)
}

// MockGetQuota is a mock of GetQuota interface.
type MockGetQuota struct {
	ctrl     *gomock.Controller
	recorder *MockGetQuotaMockRecorder
}

// MockGetQuotaMockRecorder is the mock recorder for MockGetQuota.
type MockGetQuotaMockRecorder struct {
	mock *MockGetQuota
}

// NewMockGetQuota creates a new mock instance.
func NewMockGetQuota(ctrl *gomock.Controller) *MockGetQuota {
	mock := &MockGetQuota{ctrl: ctrl}
	mock.recorder = &MockGetQuotaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetQuota) EXPECT() *MockGetQuotaMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockGetQuota) Do(ctx context.Context, req *andromeda.QuotaRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockGetQuotaMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetQuota)(nil).Do), ctx, req)
}

// MockGetQuotaKey is a mock of GetQuotaKey interface.
type MockGetQuotaKey struct {
	ctrl     *gomock.Controller
	recorder *MockGetQuotaKeyMockRecorder
}

// MockGetQuotaKeyMockRecorder is the mock recorder for MockGetQuotaKey.
type MockGetQuotaKeyMockRecorder struct {
	mock *MockGetQuotaKey
}

// NewMockGetQuotaKey creates a new mock instance.
func NewMockGetQuotaKey(ctrl *gomock.Controller) *MockGetQuotaKey {
	mock := &MockGetQuotaKey{ctrl: ctrl}
	mock.recorder = &MockGetQuotaKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetQuotaKey) EXPECT() *MockGetQuotaKeyMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockGetQuotaKey) Do(ctx context.Context, req *andromeda.QuotaRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockGetQuotaKeyMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetQuotaKey)(nil).Do), ctx, req)
}

// MockGetQuotaExpiration is a mock of GetQuotaExpiration interface.
type MockGetQuotaExpiration struct {
	ctrl     *gomock.Controller
	recorder *MockGetQuotaExpirationMockRecorder
}

// MockGetQuotaExpirationMockRecorder is the mock recorder for MockGetQuotaExpiration.
type MockGetQuotaExpirationMockRecorder struct {
	mock *MockGetQuotaExpiration
}

// NewMockGetQuotaExpiration creates a new mock instance.
func NewMockGetQuotaExpiration(ctrl *gomock.Controller) *MockGetQuotaExpiration {
	mock := &MockGetQuotaExpiration{ctrl: ctrl}
	mock.recorder = &MockGetQuotaExpirationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetQuotaExpiration) EXPECT() *MockGetQuotaExpirationMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockGetQuotaExpiration) Do(ctx context.Context, req *andromeda.QuotaRequest) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockGetQuotaExpirationMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetQuotaExpiration)(nil).Do), ctx, req)
}

// MockXSetNXQuota is a mock of XSetNXQuota interface.
type MockXSetNXQuota struct {
	ctrl     *gomock.Controller
	recorder *MockXSetNXQuotaMockRecorder
}

// MockXSetNXQuotaMockRecorder is the mock recorder for MockXSetNXQuota.
type MockXSetNXQuotaMockRecorder struct {
	mock *MockXSetNXQuota
}

// NewMockXSetNXQuota creates a new mock instance.
func NewMockXSetNXQuota(ctrl *gomock.Controller) *MockXSetNXQuota {
	mock := &MockXSetNXQuota{ctrl: ctrl}
	mock.recorder = &MockXSetNXQuotaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXSetNXQuota) EXPECT() *MockXSetNXQuotaMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockXSetNXQuota) Do(ctx context.Context, req *andromeda.QuotaRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockXSetNXQuotaMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockXSetNXQuota)(nil).Do), ctx, req)
}
