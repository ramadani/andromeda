// Code generated by MockGen. DO NOT EDIT.
// Source: andromeda.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	andromeda "github.com/ramadani/andromeda"
)

// MockUpdateQuotaUsage is a mock of UpdateQuotaUsage interface.
type MockUpdateQuotaUsage struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateQuotaUsageMockRecorder
}

// MockUpdateQuotaUsageMockRecorder is the mock recorder for MockUpdateQuotaUsage.
type MockUpdateQuotaUsageMockRecorder struct {
	mock *MockUpdateQuotaUsage
}

// NewMockUpdateQuotaUsage creates a new mock instance.
func NewMockUpdateQuotaUsage(ctrl *gomock.Controller) *MockUpdateQuotaUsage {
	mock := &MockUpdateQuotaUsage{ctrl: ctrl}
	mock.recorder = &MockUpdateQuotaUsageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateQuotaUsage) EXPECT() *MockUpdateQuotaUsageMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUpdateQuotaUsage) Do(ctx context.Context, id string, value int64, data interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, id, value, data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockUpdateQuotaUsageMockRecorder) Do(ctx, id, value, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUpdateQuotaUsage)(nil).Do), ctx, id, value, data)
}

// MockGetQuota is a mock of GetQuota interface.
type MockGetQuota struct {
	ctrl     *gomock.Controller
	recorder *MockGetQuotaMockRecorder
}

// MockGetQuotaMockRecorder is the mock recorder for MockGetQuota.
type MockGetQuotaMockRecorder struct {
	mock *MockGetQuota
}

// NewMockGetQuota creates a new mock instance.
func NewMockGetQuota(ctrl *gomock.Controller) *MockGetQuota {
	mock := &MockGetQuota{ctrl: ctrl}
	mock.recorder = &MockGetQuotaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetQuota) EXPECT() *MockGetQuotaMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockGetQuota) Do(ctx context.Context, id string, data interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, id, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockGetQuotaMockRecorder) Do(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetQuota)(nil).Do), ctx, id, data)
}

// MockXSetNXQuota is a mock of XSetNXQuota interface.
type MockXSetNXQuota struct {
	ctrl     *gomock.Controller
	recorder *MockXSetNXQuotaMockRecorder
}

// MockXSetNXQuotaMockRecorder is the mock recorder for MockXSetNXQuota.
type MockXSetNXQuotaMockRecorder struct {
	mock *MockXSetNXQuota
}

// NewMockXSetNXQuota creates a new mock instance.
func NewMockXSetNXQuota(ctrl *gomock.Controller) *MockXSetNXQuota {
	mock := &MockXSetNXQuota{ctrl: ctrl}
	mock.recorder = &MockXSetNXQuotaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXSetNXQuota) EXPECT() *MockXSetNXQuotaMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockXSetNXQuota) Do(ctx context.Context, id string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockXSetNXQuotaMockRecorder) Do(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockXSetNXQuota)(nil).Do), ctx, id, data)
}

// MockGetQuotaCacheParams is a mock of GetQuotaCacheParams interface.
type MockGetQuotaCacheParams struct {
	ctrl     *gomock.Controller
	recorder *MockGetQuotaCacheParamsMockRecorder
}

// MockGetQuotaCacheParamsMockRecorder is the mock recorder for MockGetQuotaCacheParams.
type MockGetQuotaCacheParamsMockRecorder struct {
	mock *MockGetQuotaCacheParams
}

// NewMockGetQuotaCacheParams creates a new mock instance.
func NewMockGetQuotaCacheParams(ctrl *gomock.Controller) *MockGetQuotaCacheParams {
	mock := &MockGetQuotaCacheParams{ctrl: ctrl}
	mock.recorder = &MockGetQuotaCacheParamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetQuotaCacheParams) EXPECT() *MockGetQuotaCacheParamsMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockGetQuotaCacheParams) Do(ctx context.Context, id string, data interface{}) (*andromeda.QuotaCacheParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, id, data)
	ret0, _ := ret[0].(*andromeda.QuotaCacheParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockGetQuotaCacheParamsMockRecorder) Do(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetQuotaCacheParams)(nil).Do), ctx, id, data)
}
